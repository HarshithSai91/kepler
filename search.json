[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Quarto Blog",
    "section": "",
    "text": "Simple Visualisation\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome\n\n\n\n\n\nWelcome Post\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome.html",
    "href": "posts/welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome\nHello world, this is my first blog post.\nI can write in markdown\nprint(\"Hello World\")\nI can also write math equations:\n\\[\ny = x^2\n\\]\nI can create lists easily:\n\nOne\nTwo\n\nI can also create numbered lists:\n\nOne\nTwo\n\nOr, create a table:\n\n\n\nName\nAge\n\n\n\n\nAlice\n20\n\n\nBob\n21"
  },
  {
    "objectID": "posts/visualisation.html",
    "href": "posts/visualisation.html",
    "title": "Simple Visualisation",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.plot(x, y)"
  },
  {
    "objectID": "index.html#using-kepler.gl-online-no-installation-required",
    "href": "index.html#using-kepler.gl-online-no-installation-required",
    "title": "Kepler.gl",
    "section": "1. Using Kepler.gl Online (No Installation Required)",
    "text": "1. Using Kepler.gl Online (No Installation Required)\nThe simplest way to use Kepler.gl is through its web application: Visit Kepler.gl\n\nClick “Get Started” to launch the tool.\nUpload a dataset (CSV, JSON, or GeoJSON).\nCustomize and explore your geospatial data."
  },
  {
    "objectID": "index.html#installing-kepler.gl-in-a-react-app",
    "href": "index.html#installing-kepler.gl-in-a-react-app",
    "title": "Kepler.gl",
    "section": "2. Installing Kepler.gl in a React App",
    "text": "2. Installing Kepler.gl in a React App\n\nStep 1: Installation\nUse Node v18 and above, older node versions have not been tested\nnpm install --save kepler.gl @kepler.gl/components @kepler.gl/reducers"
  },
  {
    "objectID": "index.html#get-mapbox-token",
    "href": "index.html#get-mapbox-token",
    "title": "Kepler.gl",
    "section": "Get Mapbox Token",
    "text": "Get Mapbox Token\nKepler.gl is built on top of Mapbox GL. A mapbox account and an access token are needed to use kepler.gl in your app. Get a Mapbox Access Token at mapbox.com.\n\n1. Working Template\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport document from \"global/document\";\n\nimport { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport { connect, Provider } from \"react-redux\";\n\nimport keplerGlReducer, { enhanceReduxMiddleware } from \"@kepler.gl/reducers\";\nimport KeplerGl from \"@kepler.gl/components\";\n\nimport AutoSizer from \"react-virtualized/dist/commonjs/AutoSizer\";\n\nconst reducers = combineReducers({\n  keplerGl: keplerGlReducer.initialState({\n    uiState: {\n      readOnly: false,\n      currentModal: null,\n    },\n  }),\n});\n\nconst middleWares = enhanceReduxMiddleware([\n  // Add other middlewares here\n]);\n\nconst enhancers = applyMiddleware(...middleWares);\n\nconst initialState = {};\nconst store = createStore(reducers, initialState, compose(enhancers));\n\nconst App2 = () =&gt; (\n  &lt;div\n    style={{\n      position: \"absolute\",\n      top: \"0px\",\n      left: \"0px\",\n      width: \"100%\",\n      height: \"100%\",\n    }}\n  &gt;\n    &lt;AutoSizer&gt;\n      {({ height, width }) =&gt; (\n        &lt;KeplerGl\n          mapboxApiAccessToken=\"xxx\" // Replace with your mapbox token\n          id=\"map\"\n          width={width}\n          height={height}\n        /&gt;\n      )}\n    &lt;/AutoSizer&gt;\n  &lt;/div&gt;\n);\n\nconst mapStateToProps = (state) =&gt; state;\nconst dispatchToProps = (dispatch) =&gt; ({ dispatch });\nconst ConnectedApp = connect(mapStateToProps, dispatchToProps)(App2);\nconst Root = () =&gt; (\n  &lt;Provider store={store}&gt;\n    &lt;App2 /&gt;\n  &lt;/Provider&gt;\n);\n\nexport default Root;\n\n\n2. Mount reducer\nKepler.gl uses Redux to manage its internal state, along with react-palm middleware to handle side effects. Mount kepler.gl reducer in your store, apply taskMiddleware.\nimport keplerGlReducer from '@kepler.gl/reducers';\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\nimport {taskMiddleware} from 'react-palm/tasks';\n\nconst reducer = combineReducers({\n  // &lt;-- mount kepler.gl reducer in your app\n  keplerGl: keplerGlReducer,\n\n  // Your other reducers here\n  app: appReducer\n});\n\n// create store\nconst store = createStore(reducer, {}, applyMiddleware(taskMiddleware));\n\n\n3. Mount component\nimport KeplerGl from '@kepler.gl/components';\n\nconst Map = props =&gt; (\n  &lt;KeplerGl\n      id=\"foo\"\n      mapboxApiAccessToken={token}\n      width={width}\n      height={height}/&gt;\n);\n\n\n4. Add data to map\nYou may dispatch the addDataToMap action from anywhere in your application to interact with a kepler.gl instance and add new data to it. It refreshes the entire setup (mapState, mapStyle, visState) and adds dataset(s) to a kepler.gl instance.\nimport {addDataToMap} from '@kepler.gl/actions';\n\nthis.props.dispatch(\n  addDataToMap({\n    // datasets\n    datasets: {\n      info: {\n        label: 'Sample Taxi Trips in New York City',\n        id: 'test_trip_data'\n      },\n      data: sampleTripData\n    },\n    // option\n    option: {\n      centerMap: true,\n      readOnly: false\n    },\n    // config\n    config: {\n      mapStyle: {styleType: 'light'}\n    }\n  })\n);"
  }
]